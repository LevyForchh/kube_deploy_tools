#!/usr/bin/env ruby
# Utility for templating Kubernetes manifests with ERB.
#
# Example usage:
#
# docker_deploy_tag \
# --local-prefix local-registry/ \
# --remote-prefix ***REMOVED***/ \
# --tag my-custom-tag \
# image1 image2 image3
#
# Will tag local-registry/image1:latest, local-registry/image2:latest etc. as
# ***REMOVED***/image1:my-custom-tag.
# Default values for every option are probably what you want to use most of the time.

require 'erb'
require 'yaml'
require 'optparse'

require 'kube_deploy_tools'
require 'docker_deploy_tag'

class Optparser

  class DockerDeployTagOptions
    attr_accessor :local_prefix, :remote_prefix, :images, :tag

    def initialize
      self.local_prefix = 'local-registry/'
      self.remote_prefix = "#{KubeDeployTools::DEFAULT_REGISTRY}/"
      self.tag = KubeDeployTools::tag_from_local_env
    end

    def define_options(parser)
      parser.on('-lPREFIX', '--local-prefix PREFIX', 'The local Docker prefix to strip to get to the base image name') do |f|
        self.template = f
      end

      parser.on('-tTAG', '--tag TAG', 'Tag Docker images with TAG') do |t|
        self.tag = t
      end

      parser.on('-rPREFIX', '--remote-prefix PREFIX', 'The remote Docker prefix to prepend to the base image name') do |t|
        self.tag = t
      end
    end

  end

  def parse(args)
    @options = DockerDeployTagOptions.new
    OptionParser.new do |parser|
      @options.define_options(parser)
      parser.parse!(args)
    end
    @options
  end
end

def options
  $options ||= begin
    parser = Optparser.new
    parser.parse(ARGV)
  end
end

def images
  # Make sure options have been parsed
  options

  # The rest of ARGV is now the list of images to retag
  ARGV
end

logger = KubeDeployTools::FormattedLogger.build
shellrunner = KubeDeployTools::Shellrunner.new(logger: logger)

ddt = KubeDeployTools::DockerDeployTag.new(shellrunner: shellrunner)
ddt.tag_images(options.local_prefix, options.remote_prefix, images, options.tag)
